/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

//FILTRO APPRISSIMATO 5*5
#include <stdio_ext.h>
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <stdlib.h>
#include "xscutimer.h"
#include <math.h>
#include "xil_io.h"
#include "xil_cache_l.h"
#include "Lena512_sr45.h"
#include "xtime_l.h"

#define DDRBaseAddr 0x00100000
#define DDRDestAddr 0x1FFFFFFF
#define DDRBaseAddr2 0x10000000
#define DDRBaseAddr3 0x100F0000


int main()
{
    XTime tStart, tEnd;
    init_platform();
    int c=0;
    int r=0;
    int M=5;
    int N=5;
    clock_t inizio,fine;
    int cicli=0;
    int centro=ceil(N/2); //prendo il limite superiore della divisione
    float tempo=0;//tempo finale in secondi
    int matspaz[5][5]= {
           			{1, 4, 8, 4, 1} ,
           			{4, 16, 32 ,16,4} ,
           			{8, 32, 64,32,8},
					{4, 16, 32, 16,3},
					{1 ,4 ,8 ,4 ,1}
           			};


//SCRITTURA DEELLA FOTO IN MEMORIA
    for(u32 i=0;i<512*512;i++){
    	Xil_Out8(DDRBaseAddr2+i,lenna[i]);
    	c++;
    	if(c==512){
    		c=0;
    		r++;
     }  }

tStart=0;
printf("il timer ha valore %llu\n",tStart);
XTime_GetTime(&tStart);//prendo il valore del timer all inizio
int finestra[N][M];
c=0;
r=0;
for(u32 i=0;i<512*512;i++){
        finestra[2][2]=Xil_In8(DDRBaseAddr2+512*r+c);
        //riga 0
        if(r>1 && c>1){
           finestra[0][0]=Xil_In8(DDRBaseAddr2+512*(r-2)+c-2);
        }
        else finestra[0][0]=0;

        if(r>0 && c>1){
             finestra[0][1]=Xil_In8(DDRBaseAddr2+512*(r-1)+c-2);
        }
        else finestra[0][1]=0;

        if(c>1){
           finestra[0][2]=Xil_In8(DDRBaseAddr2+512*r+c-2);
        }
        else finestra[0][2]=0;

        if(r<511 && c>1 ){
           finestra[0][3]=Xil_In8(DDRBaseAddr2+512*(r+1)+c-2);
        }
        else finestra[0][3]=0;

        if(r<510 && c>1 ){
             finestra[0][4]=Xil_In8(DDRBaseAddr2+512*(r+2)+c-2);
        }
        else finestra[0][4]=0;

        //riga 1
         if(r>1 && c>0){
            finestra[1][0]=Xil_In8(DDRBaseAddr2+512*(r-2)+c-1);
         }
        else finestra[1][0]=0;

        if(r>0 && c>0){
            finestra[1][1]=Xil_In8(DDRBaseAddr2+512*(r-1)+c-1);
        }
        else finestra[1][1]=0;

        if(c>0){
           finestra[1][2]=Xil_In8(DDRBaseAddr2+512*(r)+c-1);
        }
        else finestra[1][2]=0;

        if(r<511 && c>0){
           finestra[1][3]=Xil_In8(DDRBaseAddr2+512*(r+1)+c-1);
        }
        else finestra[1][3]=0;

        if(c>0 && r<510 ){
           finestra[1][4]=Xil_In8(DDRBaseAddr2+512*(r+2)+c-1);
        }
        else finestra[1][4]=0;

        //riga 2
        if( r>1 ){
           finestra[2][0]=Xil_In8(DDRBaseAddr2+512*(r-2)+c);
        }
        else finestra[2][0]=0;

        if(r>0){
            finestra[2][1]=Xil_In8(DDRBaseAddr2+512*(r-1)+c);
                }
        else finestra[2][1]=0;


        if(r<511){
            finestra[2][3]=Xil_In8(DDRBaseAddr2+512*(r+1)+c);
        }
        else finestra[2][3]=0;

        if(r<510){
            finestra[2][4]=Xil_In8(DDRBaseAddr2+512*(r+2)+c);
        }
        else finestra[2][4]=0;

        //riga 3
        if(c>0 && r>1){
            finestra[3][0]=Xil_In8(DDRBaseAddr2+512*(r-2)+c+1);
        }
        else finestra[3][0]=0;

        if( c>0 && r>0){
            finestra[3][1]=Xil_In8(DDRBaseAddr2+512*(r-1)+c+1);
        }
        else finestra[3][1]=0;

        if( c>0){
            finestra[3][2]=Xil_In8(DDRBaseAddr2+512*(r)+c+1);
        }
        else finestra[3][2]=0;

        if( c>0 && r<511 ){
            finestra[3][3]=Xil_In8(DDRBaseAddr2+512*(r+1)+c+1);
        }
        else finestra[3][3]=0;

        if(c>0 &&r<510){
            finestra[3][4]=Xil_In8(DDRBaseAddr2+512*(r+2)+c+1);
        }
        else finestra[3][4]=0;

        //riga 4
        if( c>1 && r>1 ){
            finestra[4][0]=Xil_In8(DDRBaseAddr2+512*(r-2)+c+2);
        }
        else finestra[4][0]=0;

        if( c>1 && r>0 ){
            finestra[4][1]=Xil_In8(DDRBaseAddr2+512*(r-1)+c+2);
        }
        else finestra[4][1]=0;

        if(c>1 ){
            finestra[4][2]=Xil_In8(DDRBaseAddr2+512*(r)+c+2);
        }
        else finestra[4][2]=0;

        if( c>1 && r<511){
            finestra[4][3]=Xil_In8(DDRBaseAddr2+512*(r+1)+c+2);
        }
        else finestra[4][3]=0;

        if(c>1 && r<510 ){
            finestra[4][4]=Xil_In8(DDRBaseAddr2+512*(r-2)+c+2);
        }
        else finestra[4][4]=0;

              //FILTRO BILATERALE APPROSSIMATO
               int denominatore=0;
               float pixel=0;
               int pi=0;
               int ass=0;
               int sottrazione=0;
               float sigmar=45;//SOLO A FINE INFORMATIVO
               int risul=0;
               int tot=0;
               int molt=0;
               int valori[N][M];
               float filtrob[N][M];
               for(int i=0;i<N;i++){
                    for(int j=0;j<M;j++){
                       sottrazione=(finestra[i][j]-finestra[centro][centro]);
                       ass=fabs(sottrazione);
                       //gestisco i vari casi
                       if(ass<12){
                       valori[i][j]=64;
                       }
                       else if(ass<20){
                           valori[i][j]=60;
                       }
                       else if(ass<29){
                           valori[i][j]=56;
                       }
                       else if(ass<39){
                           valori[i][j]=48;
                       }
                       else if(ass<49){
                           valori[i][j]=40;
                       }
                       else if(ass<58){
                           valori[i][j]=32;
                       }
                       else if(ass<66){
                           valori[i][j]=24;
                       }
                       else if(ass<72){
                           valori[i][j]=20;
                       }
                       else if(ass<79){
                           valori[i][j]=16;
                       }
                       else if(ass<87){
                           valori[i][j]=12;
                       }
                       else if(ass<98){
                           valori[i][j]=8;
                       }
                       else if(ass<112){
                           valori[i][j]=4;
                       }
                       else if(ass<119){
                           valori[i][j]=2;
                       }
                       else if(ass<130){
                          valori[i][j]=1;
                       }
                       else valori[i][j]=0;

                       risul=valori[i][j]*matspaz[i][j];
                       filtrob[i][j]=risul;
                       //valori singolo pixel
                       molt=finestra[i][j]*filtrob[i][j];
                       tot=tot+molt;
                       denominatore=denominatore+filtrob[i][j];
                       }}

                       pixel=tot/denominatore;
                  	   pi=(int)pixel;
                  	   Xil_Out8(DDRBaseAddr3+i,pi);
                  	   //printf("ris %d\n",pi);

  c++;
  if(c%512==0){
     r++;
     c=0;
  }
}
XTime_GetTime(&tEnd);
printf("cicli necessari %llu\n", (tEnd - tStart));
printf("tempo in secondi per il calcolo del FILTRO BILATERALE APPROSSIMATO %.2f\n", 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND*2));
printf("il timer ha valore %llu\n",tEnd);




    cleanup_platform();
    return 0;

}
